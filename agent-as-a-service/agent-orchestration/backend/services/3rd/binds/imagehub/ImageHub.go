// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package imagehub

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ImageHubMetaData contains all meta data concerning the ImageHub contract.
var ImageHubMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"imageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ImageTipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiredAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SubscriptionPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"SubscriptionRegistered\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"chargeSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"WEAI\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"registerSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"imageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferImageTip\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"updateSubscriptionPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// ImageHubABI is the input ABI used to generate the binding from.
// Deprecated: Use ImageHubMetaData.ABI instead.
var ImageHubABI = ImageHubMetaData.ABI

// ImageHubBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ImageHubMetaData.Bin instead.
var ImageHubBin = ImageHubMetaData.Bin

// DeployImageHub deploys a new Ethereum contract, binding an instance of ImageHub to it.
func DeployImageHub(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ImageHub, error) {
	parsed, err := ImageHubMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ImageHubBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ImageHub{ImageHubCaller: ImageHubCaller{contract: contract}, ImageHubTransactor: ImageHubTransactor{contract: contract}, ImageHubFilterer: ImageHubFilterer{contract: contract}}, nil
}

// ImageHub is an auto generated Go binding around an Ethereum contract.
type ImageHub struct {
	ImageHubCaller     // Read-only binding to the contract
	ImageHubTransactor // Write-only binding to the contract
	ImageHubFilterer   // Log filterer for contract events
}

// ImageHubCaller is an auto generated read-only Go binding around an Ethereum contract.
type ImageHubCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImageHubTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ImageHubTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImageHubFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ImageHubFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ImageHubSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ImageHubSession struct {
	Contract     *ImageHub         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ImageHubCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ImageHubCallerSession struct {
	Contract *ImageHubCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ImageHubTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ImageHubTransactorSession struct {
	Contract     *ImageHubTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ImageHubRaw is an auto generated low-level Go binding around an Ethereum contract.
type ImageHubRaw struct {
	Contract *ImageHub // Generic contract binding to access the raw methods on
}

// ImageHubCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ImageHubCallerRaw struct {
	Contract *ImageHubCaller // Generic read-only contract binding to access the raw methods on
}

// ImageHubTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ImageHubTransactorRaw struct {
	Contract *ImageHubTransactor // Generic write-only contract binding to access the raw methods on
}

// NewImageHub creates a new instance of ImageHub, bound to a specific deployed contract.
func NewImageHub(address common.Address, backend bind.ContractBackend) (*ImageHub, error) {
	contract, err := bindImageHub(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ImageHub{ImageHubCaller: ImageHubCaller{contract: contract}, ImageHubTransactor: ImageHubTransactor{contract: contract}, ImageHubFilterer: ImageHubFilterer{contract: contract}}, nil
}

// NewImageHubCaller creates a new read-only instance of ImageHub, bound to a specific deployed contract.
func NewImageHubCaller(address common.Address, caller bind.ContractCaller) (*ImageHubCaller, error) {
	contract, err := bindImageHub(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ImageHubCaller{contract: contract}, nil
}

// NewImageHubTransactor creates a new write-only instance of ImageHub, bound to a specific deployed contract.
func NewImageHubTransactor(address common.Address, transactor bind.ContractTransactor) (*ImageHubTransactor, error) {
	contract, err := bindImageHub(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ImageHubTransactor{contract: contract}, nil
}

// NewImageHubFilterer creates a new log filterer instance of ImageHub, bound to a specific deployed contract.
func NewImageHubFilterer(address common.Address, filterer bind.ContractFilterer) (*ImageHubFilterer, error) {
	contract, err := bindImageHub(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ImageHubFilterer{contract: contract}, nil
}

// bindImageHub binds a generic wrapper to an already deployed contract.
func bindImageHub(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ImageHubMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ImageHub *ImageHubRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ImageHub.Contract.ImageHubCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ImageHub *ImageHubRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ImageHub.Contract.ImageHubTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ImageHub *ImageHubRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ImageHub.Contract.ImageHubTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ImageHub *ImageHubCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ImageHub.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ImageHub *ImageHubTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ImageHub.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ImageHub *ImageHubTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ImageHub.Contract.contract.Transact(opts, method, params...)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_ImageHub *ImageHubCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ImageHub.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_ImageHub *ImageHubSession) GetChainId() (*big.Int, error) {
	return _ImageHub.Contract.GetChainId(&_ImageHub.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256 chainId)
func (_ImageHub *ImageHubCallerSession) GetChainId() (*big.Int, error) {
	return _ImageHub.Contract.GetChainId(&_ImageHub.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ImageHub *ImageHubCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ImageHub.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ImageHub *ImageHubSession) Owner() (common.Address, error) {
	return _ImageHub.Contract.Owner(&_ImageHub.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ImageHub *ImageHubCallerSession) Owner() (common.Address, error) {
	return _ImageHub.Contract.Owner(&_ImageHub.CallOpts)
}

// ChargeSubscription is a paid mutator transaction binding the contract method 0xac884ab7.
//
// Solidity: function chargeSubscription(address user, address creator) returns()
func (_ImageHub *ImageHubTransactor) ChargeSubscription(opts *bind.TransactOpts, user common.Address, creator common.Address) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "chargeSubscription", user, creator)
}

// ChargeSubscription is a paid mutator transaction binding the contract method 0xac884ab7.
//
// Solidity: function chargeSubscription(address user, address creator) returns()
func (_ImageHub *ImageHubSession) ChargeSubscription(user common.Address, creator common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.ChargeSubscription(&_ImageHub.TransactOpts, user, creator)
}

// ChargeSubscription is a paid mutator transaction binding the contract method 0xac884ab7.
//
// Solidity: function chargeSubscription(address user, address creator) returns()
func (_ImageHub *ImageHubTransactorSession) ChargeSubscription(user common.Address, creator common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.ChargeSubscription(&_ImageHub.TransactOpts, user, creator)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address WEAI) returns()
func (_ImageHub *ImageHubTransactor) Initialize(opts *bind.TransactOpts, WEAI common.Address) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "initialize", WEAI)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address WEAI) returns()
func (_ImageHub *ImageHubSession) Initialize(WEAI common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.Initialize(&_ImageHub.TransactOpts, WEAI)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address WEAI) returns()
func (_ImageHub *ImageHubTransactorSession) Initialize(WEAI common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.Initialize(&_ImageHub.TransactOpts, WEAI)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_ImageHub *ImageHubTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_ImageHub *ImageHubSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ImageHub.Contract.Multicall(&_ImageHub.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) payable returns(bytes[] results)
func (_ImageHub *ImageHubTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ImageHub.Contract.Multicall(&_ImageHub.TransactOpts, data)
}

// RegisterSubscription is a paid mutator transaction binding the contract method 0xe34e3b7e.
//
// Solidity: function registerSubscription(address user, address creator, uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubTransactor) RegisterSubscription(opts *bind.TransactOpts, user common.Address, creator common.Address, duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "registerSubscription", user, creator, duration, price)
}

// RegisterSubscription is a paid mutator transaction binding the contract method 0xe34e3b7e.
//
// Solidity: function registerSubscription(address user, address creator, uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubSession) RegisterSubscription(user common.Address, creator common.Address, duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.RegisterSubscription(&_ImageHub.TransactOpts, user, creator, duration, price)
}

// RegisterSubscription is a paid mutator transaction binding the contract method 0xe34e3b7e.
//
// Solidity: function registerSubscription(address user, address creator, uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubTransactorSession) RegisterSubscription(user common.Address, creator common.Address, duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.RegisterSubscription(&_ImageHub.TransactOpts, user, creator, duration, price)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ImageHub *ImageHubTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ImageHub *ImageHubSession) RenounceOwnership() (*types.Transaction, error) {
	return _ImageHub.Contract.RenounceOwnership(&_ImageHub.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ImageHub *ImageHubTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ImageHub.Contract.RenounceOwnership(&_ImageHub.TransactOpts)
}

// TransferImageTip is a paid mutator transaction binding the contract method 0x6fc563be.
//
// Solidity: function transferImageTip(address creator, uint256 imageId, uint256 amount) payable returns()
func (_ImageHub *ImageHubTransactor) TransferImageTip(opts *bind.TransactOpts, creator common.Address, imageId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "transferImageTip", creator, imageId, amount)
}

// TransferImageTip is a paid mutator transaction binding the contract method 0x6fc563be.
//
// Solidity: function transferImageTip(address creator, uint256 imageId, uint256 amount) payable returns()
func (_ImageHub *ImageHubSession) TransferImageTip(creator common.Address, imageId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.TransferImageTip(&_ImageHub.TransactOpts, creator, imageId, amount)
}

// TransferImageTip is a paid mutator transaction binding the contract method 0x6fc563be.
//
// Solidity: function transferImageTip(address creator, uint256 imageId, uint256 amount) payable returns()
func (_ImageHub *ImageHubTransactorSession) TransferImageTip(creator common.Address, imageId *big.Int, amount *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.TransferImageTip(&_ImageHub.TransactOpts, creator, imageId, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ImageHub *ImageHubTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ImageHub *ImageHubSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.TransferOwnership(&_ImageHub.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ImageHub *ImageHubTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ImageHub.Contract.TransferOwnership(&_ImageHub.TransactOpts, newOwner)
}

// UpdateSubscriptionPrice is a paid mutator transaction binding the contract method 0x667e9660.
//
// Solidity: function updateSubscriptionPrice(uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubTransactor) UpdateSubscriptionPrice(opts *bind.TransactOpts, duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.contract.Transact(opts, "updateSubscriptionPrice", duration, price)
}

// UpdateSubscriptionPrice is a paid mutator transaction binding the contract method 0x667e9660.
//
// Solidity: function updateSubscriptionPrice(uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubSession) UpdateSubscriptionPrice(duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.UpdateSubscriptionPrice(&_ImageHub.TransactOpts, duration, price)
}

// UpdateSubscriptionPrice is a paid mutator transaction binding the contract method 0x667e9660.
//
// Solidity: function updateSubscriptionPrice(uint256 duration, uint256 price) returns()
func (_ImageHub *ImageHubTransactorSession) UpdateSubscriptionPrice(duration *big.Int, price *big.Int) (*types.Transaction, error) {
	return _ImageHub.Contract.UpdateSubscriptionPrice(&_ImageHub.TransactOpts, duration, price)
}

// ImageHubImageTipTransferredIterator is returned from FilterImageTipTransferred and is used to iterate over the raw logs and unpacked data for ImageTipTransferred events raised by the ImageHub contract.
type ImageHubImageTipTransferredIterator struct {
	Event *ImageHubImageTipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubImageTipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubImageTipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubImageTipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubImageTipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubImageTipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubImageTipTransferred represents a ImageTipTransferred event raised by the ImageHub contract.
type ImageHubImageTipTransferred struct {
	User    common.Address
	Creator common.Address
	ImageId *big.Int
	Amount  *big.Int
	Fee     *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterImageTipTransferred is a free log retrieval operation binding the contract event 0x9d239c3ad6158bc2f486c3310d25622c5250fa11f60eb415f1d5b848ac0d145e.
//
// Solidity: event ImageTipTransferred(address indexed user, address indexed creator, uint256 indexed imageId, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) FilterImageTipTransferred(opts *bind.FilterOpts, user []common.Address, creator []common.Address, imageId []*big.Int) (*ImageHubImageTipTransferredIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var imageIdRule []interface{}
	for _, imageIdItem := range imageId {
		imageIdRule = append(imageIdRule, imageIdItem)
	}

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "ImageTipTransferred", userRule, creatorRule, imageIdRule)
	if err != nil {
		return nil, err
	}
	return &ImageHubImageTipTransferredIterator{contract: _ImageHub.contract, event: "ImageTipTransferred", logs: logs, sub: sub}, nil
}

// WatchImageTipTransferred is a free log subscription operation binding the contract event 0x9d239c3ad6158bc2f486c3310d25622c5250fa11f60eb415f1d5b848ac0d145e.
//
// Solidity: event ImageTipTransferred(address indexed user, address indexed creator, uint256 indexed imageId, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) WatchImageTipTransferred(opts *bind.WatchOpts, sink chan<- *ImageHubImageTipTransferred, user []common.Address, creator []common.Address, imageId []*big.Int) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}
	var imageIdRule []interface{}
	for _, imageIdItem := range imageId {
		imageIdRule = append(imageIdRule, imageIdItem)
	}

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "ImageTipTransferred", userRule, creatorRule, imageIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubImageTipTransferred)
				if err := _ImageHub.contract.UnpackLog(event, "ImageTipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseImageTipTransferred is a log parse operation binding the contract event 0x9d239c3ad6158bc2f486c3310d25622c5250fa11f60eb415f1d5b848ac0d145e.
//
// Solidity: event ImageTipTransferred(address indexed user, address indexed creator, uint256 indexed imageId, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) ParseImageTipTransferred(log types.Log) (*ImageHubImageTipTransferred, error) {
	event := new(ImageHubImageTipTransferred)
	if err := _ImageHub.contract.UnpackLog(event, "ImageTipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ImageHubInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ImageHub contract.
type ImageHubInitializedIterator struct {
	Event *ImageHubInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubInitialized represents a Initialized event raised by the ImageHub contract.
type ImageHubInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ImageHub *ImageHubFilterer) FilterInitialized(opts *bind.FilterOpts) (*ImageHubInitializedIterator, error) {

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ImageHubInitializedIterator{contract: _ImageHub.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ImageHub *ImageHubFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ImageHubInitialized) (event.Subscription, error) {

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubInitialized)
				if err := _ImageHub.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ImageHub *ImageHubFilterer) ParseInitialized(log types.Log) (*ImageHubInitialized, error) {
	event := new(ImageHubInitialized)
	if err := _ImageHub.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ImageHubOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ImageHub contract.
type ImageHubOwnershipTransferredIterator struct {
	Event *ImageHubOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubOwnershipTransferred represents a OwnershipTransferred event raised by the ImageHub contract.
type ImageHubOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ImageHub *ImageHubFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ImageHubOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ImageHubOwnershipTransferredIterator{contract: _ImageHub.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ImageHub *ImageHubFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ImageHubOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubOwnershipTransferred)
				if err := _ImageHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ImageHub *ImageHubFilterer) ParseOwnershipTransferred(log types.Log) (*ImageHubOwnershipTransferred, error) {
	event := new(ImageHubOwnershipTransferred)
	if err := _ImageHub.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ImageHubSubscriptionChargedIterator is returned from FilterSubscriptionCharged and is used to iterate over the raw logs and unpacked data for SubscriptionCharged events raised by the ImageHub contract.
type ImageHubSubscriptionChargedIterator struct {
	Event *ImageHubSubscriptionCharged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubSubscriptionChargedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubSubscriptionCharged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubSubscriptionCharged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubSubscriptionChargedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubSubscriptionChargedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubSubscriptionCharged represents a SubscriptionCharged event raised by the ImageHub contract.
type ImageHubSubscriptionCharged struct {
	User      common.Address
	Creator   common.Address
	Duration  *big.Int
	ExpiredAt *big.Int
	Amount    *big.Int
	Fee       *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSubscriptionCharged is a free log retrieval operation binding the contract event 0x0bc8ce05a473cd40acc9b6689277d1b7c59ff62cb5491e8ec926bddb9e365a36.
//
// Solidity: event SubscriptionCharged(address indexed user, address indexed creator, uint256 duration, uint256 expiredAt, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) FilterSubscriptionCharged(opts *bind.FilterOpts, user []common.Address, creator []common.Address) (*ImageHubSubscriptionChargedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "SubscriptionCharged", userRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return &ImageHubSubscriptionChargedIterator{contract: _ImageHub.contract, event: "SubscriptionCharged", logs: logs, sub: sub}, nil
}

// WatchSubscriptionCharged is a free log subscription operation binding the contract event 0x0bc8ce05a473cd40acc9b6689277d1b7c59ff62cb5491e8ec926bddb9e365a36.
//
// Solidity: event SubscriptionCharged(address indexed user, address indexed creator, uint256 duration, uint256 expiredAt, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) WatchSubscriptionCharged(opts *bind.WatchOpts, sink chan<- *ImageHubSubscriptionCharged, user []common.Address, creator []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "SubscriptionCharged", userRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubSubscriptionCharged)
				if err := _ImageHub.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubscriptionCharged is a log parse operation binding the contract event 0x0bc8ce05a473cd40acc9b6689277d1b7c59ff62cb5491e8ec926bddb9e365a36.
//
// Solidity: event SubscriptionCharged(address indexed user, address indexed creator, uint256 duration, uint256 expiredAt, uint256 amount, uint256 fee)
func (_ImageHub *ImageHubFilterer) ParseSubscriptionCharged(log types.Log) (*ImageHubSubscriptionCharged, error) {
	event := new(ImageHubSubscriptionCharged)
	if err := _ImageHub.contract.UnpackLog(event, "SubscriptionCharged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ImageHubSubscriptionPriceUpdatedIterator is returned from FilterSubscriptionPriceUpdated and is used to iterate over the raw logs and unpacked data for SubscriptionPriceUpdated events raised by the ImageHub contract.
type ImageHubSubscriptionPriceUpdatedIterator struct {
	Event *ImageHubSubscriptionPriceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubSubscriptionPriceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubSubscriptionPriceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubSubscriptionPriceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubSubscriptionPriceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubSubscriptionPriceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubSubscriptionPriceUpdated represents a SubscriptionPriceUpdated event raised by the ImageHub contract.
type ImageHubSubscriptionPriceUpdated struct {
	Creator  common.Address
	Duration *big.Int
	Price    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSubscriptionPriceUpdated is a free log retrieval operation binding the contract event 0xab7a1a256e1a3e6eefe1e11e862d92b2a9efd3ab45a0a0b3d330687f42021ec0.
//
// Solidity: event SubscriptionPriceUpdated(address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) FilterSubscriptionPriceUpdated(opts *bind.FilterOpts, creator []common.Address) (*ImageHubSubscriptionPriceUpdatedIterator, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "SubscriptionPriceUpdated", creatorRule)
	if err != nil {
		return nil, err
	}
	return &ImageHubSubscriptionPriceUpdatedIterator{contract: _ImageHub.contract, event: "SubscriptionPriceUpdated", logs: logs, sub: sub}, nil
}

// WatchSubscriptionPriceUpdated is a free log subscription operation binding the contract event 0xab7a1a256e1a3e6eefe1e11e862d92b2a9efd3ab45a0a0b3d330687f42021ec0.
//
// Solidity: event SubscriptionPriceUpdated(address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) WatchSubscriptionPriceUpdated(opts *bind.WatchOpts, sink chan<- *ImageHubSubscriptionPriceUpdated, creator []common.Address) (event.Subscription, error) {

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "SubscriptionPriceUpdated", creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubSubscriptionPriceUpdated)
				if err := _ImageHub.contract.UnpackLog(event, "SubscriptionPriceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubscriptionPriceUpdated is a log parse operation binding the contract event 0xab7a1a256e1a3e6eefe1e11e862d92b2a9efd3ab45a0a0b3d330687f42021ec0.
//
// Solidity: event SubscriptionPriceUpdated(address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) ParseSubscriptionPriceUpdated(log types.Log) (*ImageHubSubscriptionPriceUpdated, error) {
	event := new(ImageHubSubscriptionPriceUpdated)
	if err := _ImageHub.contract.UnpackLog(event, "SubscriptionPriceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ImageHubSubscriptionRegisteredIterator is returned from FilterSubscriptionRegistered and is used to iterate over the raw logs and unpacked data for SubscriptionRegistered events raised by the ImageHub contract.
type ImageHubSubscriptionRegisteredIterator struct {
	Event *ImageHubSubscriptionRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ImageHubSubscriptionRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ImageHubSubscriptionRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ImageHubSubscriptionRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ImageHubSubscriptionRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ImageHubSubscriptionRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ImageHubSubscriptionRegistered represents a SubscriptionRegistered event raised by the ImageHub contract.
type ImageHubSubscriptionRegistered struct {
	User     common.Address
	Creator  common.Address
	Duration *big.Int
	Price    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterSubscriptionRegistered is a free log retrieval operation binding the contract event 0xe1b67d1786c6125e949791ee25291c8dc38b471ae947bf8c65433da2f31149bf.
//
// Solidity: event SubscriptionRegistered(address indexed user, address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) FilterSubscriptionRegistered(opts *bind.FilterOpts, user []common.Address, creator []common.Address) (*ImageHubSubscriptionRegisteredIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.FilterLogs(opts, "SubscriptionRegistered", userRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return &ImageHubSubscriptionRegisteredIterator{contract: _ImageHub.contract, event: "SubscriptionRegistered", logs: logs, sub: sub}, nil
}

// WatchSubscriptionRegistered is a free log subscription operation binding the contract event 0xe1b67d1786c6125e949791ee25291c8dc38b471ae947bf8c65433da2f31149bf.
//
// Solidity: event SubscriptionRegistered(address indexed user, address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) WatchSubscriptionRegistered(opts *bind.WatchOpts, sink chan<- *ImageHubSubscriptionRegistered, user []common.Address, creator []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}
	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _ImageHub.contract.WatchLogs(opts, "SubscriptionRegistered", userRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ImageHubSubscriptionRegistered)
				if err := _ImageHub.contract.UnpackLog(event, "SubscriptionRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubscriptionRegistered is a log parse operation binding the contract event 0xe1b67d1786c6125e949791ee25291c8dc38b471ae947bf8c65433da2f31149bf.
//
// Solidity: event SubscriptionRegistered(address indexed user, address indexed creator, uint256 duration, uint256 price)
func (_ImageHub *ImageHubFilterer) ParseSubscriptionRegistered(log types.Log) (*ImageHubSubscriptionRegistered, error) {
	event := new(ImageHubSubscriptionRegistered)
	if err := _ImageHub.contract.UnpackLog(event, "SubscriptionRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
